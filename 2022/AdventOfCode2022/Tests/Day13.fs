module Day13

open Xunit

[<Theory>]
[<InlineData("[[],1]", "[[],2]", true)>]
[<InlineData("[[],2]", "[[],1]", false)>]
[<InlineData("[1,1,3,1,1]", "[1,1,5,1,1]", true)>]
[<InlineData("[[1],[2,3,4]]", "[[1],4]", true)>]
[<InlineData("[9]", "[[8,7,6]]", false)>]
[<InlineData("[[4,4],4,4]", "[[4,4],4,4,4]", true)>]
[<InlineData("[7,7,7,7]", "[7,7,7]", false)>]
[<InlineData("[]", "[3]", true)>]
[<InlineData("[[[]]]", "[[]]", false)>]
[<InlineData("[1,[2,[3,[4,[5,6,7]]]],8,9]", "[1,[2,[3,[4,[5,6,0]]]],8,9]", false)>]
[<InlineData(
    "[[[[],[10,0,1],4]],[[0],7],[0,[],[]],[],[]]",
    "[[7,[[],[1],[5,5,6],[10,3],5],10,10],[[]],[5,[2,2],1,4]]",
    true
    )>]
[<InlineData(
    "[[10,[10,[9,8,3],3,0],[[3,10,10],[5,8,5]],[],7],[],[8],[7,1]]",
    "[[7,1],[[2],[[3,1,7,8,3],7]]]",
    false
    )>]
[<InlineData(
    "[[[5,[9,4,7,6],5,[8],[7,3]],[],[4],[[3,8],[8,8,9,6,9],[1,5,1]]],[[],5]]",
    "[[10,[8,[9,6],4,[6,0,3]]],[]]",
    true
    )>]
[<InlineData(
    "[[5],[6,2,[9,[1,3,9]]],[[8,[2,0,8,2],[],[8,6,2,9]],9,5],[3,0,3,8]]",
    "[[],[[],[],[],[6,8,[5,10,6],7],0],[[[0,5,7],[],[0,3,4,10,2],[1,0,1],[10]],8,[1,4]],[[[10,2,10,10,2],3,6,8,0],2,5]]",
    false
    )>]
[<InlineData(
    "[[5,3,6,9],[[7,9],8,[[1,8],0,[1],8,[]],10,6],[1],[2,[[7,2,5],[2,7]],[[],10,[],[5,10,1],10],[6,[1,1],[7,6,10,2,1],0],[]],[[8,[0],0],5,4,[],1]]",
    "[[[5,[0,8,0,9,0],[1,8,9],[1,9]],[8,4,[],[3,10,4],3],1,9,[]],[[1,10,2],6],[5,5,10],[[1,[0,5,0],[2,6,1],4,7],[[1]],[10,[1,0],2,[],4],[[8,8,7,8],[2,6]]]]",
    true
    )>]
[<InlineData(
    "[[2,8]]",
    "[[[[5],[9,9,6],[1,8],[5,4,6,0,2]],[[5,9],[]],[7,[4,2,3,4],6]],[],[1,9,7,[6]]]",
    true
    )>]
[<InlineData("[[5,[7]],[[6,3],[8,[]],6],[[[3,8,1,1,3]],1,7,[],0],[1,[],[],0],[]]", "[]", false)>]
[<InlineData("[1,2,3,[1,2,3],4,1]", "[1,2,3,[1,2,3],4,0]", false)>]
[<InlineData("[[8,[[7]]]]", "[[[[8]]]]", false)>]
let ``pairIsInOrder`` (left: string, right: string, expected) =
    let actual = Day13.pairIsInOrder ((left.ToCharArray(), right.ToCharArray()), 1)

    Assert.Equal(expected, actual)

[<Theory>]
[<InlineData("9", "[9,1,4,3,6]", 1, "[9,1,4,3,6]")>]
[<InlineData("10", "[9,1,10,3,6]", 5, "[9,1,1,3,6]")>]
let ``removeDoubleDigit`` (item, packet: string, index, expected: string) =
    let actual = Day13.removeDoubleDigit(item, packet.ToCharArray(), index)
    
    Array.zip (expected.ToCharArray()) actual |> Array.iter2 (fun e a -> Assert.Equal(e, a))
